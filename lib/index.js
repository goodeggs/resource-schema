// Generated by CoffeeScript 1.8.0
var RestfulResource, dot, fibrous, mongoose,
  __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

dot = require('dot-component');

mongoose = require('mongoose');

fibrous = require('fibrous');

module.exports = RestfulResource = (function() {
  function RestfulResource(Model, schema) {
    this.Model = Model;
    this.schema = schema;
    this._isObjectId = __bind(this._isObjectId, this);
    this._getResourceAndModelFieldsFromSchema = __bind(this._getResourceAndModelFieldsFromSchema, this);
    this._selectValidSearchFieldsFromQuery = __bind(this._selectValidSearchFieldsFromQuery, this);
    this._extractSelectFromQuery = __bind(this._extractSelectFromQuery, this);
    this._exctractLimitFromQuery = __bind(this._exctractLimitFromQuery, this);
    this._createResourceFromModelInstance = __bind(this._createResourceFromModelInstance, this);
    this.query = __bind(this.query, this);
    this.get = __bind(this.get, this);
  }

  RestfulResource.prototype.get = function(paramId) {
    return fibrous((function(_this) {
      return function(req, res, next) {
        var e, id, modelFound, modelQuery, select;
        id = req.params[paramId];
        select = _this._extractSelectFromQuery(req.query);
        try {
          modelQuery = _this.Model.findById(id);
          if (select != null) {
            modelQuery = modelQuery.select(select);
          }
          modelFound = modelQuery.sync.exec();
        } catch (_error) {
          e = _error;
          res.send(400, e.stack);
        }
        if (modelFound == null) {
          res.send(404, "No " + paramId + " found with id " + id);
        }
        return res.body = _this._createResourceFromModelInstance(modelFound);
      };
    })(this));
  };

  RestfulResource.prototype.query = function() {
    return fibrous((function(_this) {
      return function(req, res, next) {
        var e, limit, modelField, modelFound, modelQuery, modelsFound, resourceField, resources, searchFields, select, value, _i, _len, _ref, _ref1;
        limit = _this._exctractLimitFromQuery(req.query);
        select = _this._extractSelectFromQuery(req.query);
        searchFields = _this._selectValidSearchFieldsFromQuery(req.query);
        try {
          modelQuery = _this.Model.find();
          _ref = _this.schema;
          for (resourceField in _ref) {
            modelField = _ref[resourceField];
            value = dot.get(searchFields, resourceField);
            if (value) {
              if (_this._isObjectId(value)) {
                value = new mongoose.Types.ObjectId(value);
              }
              modelQuery = modelQuery.where(modelField).equals(value);
            }
          }
          if (select != null) {
            modelQuery = modelQuery.select(select);
          }
          if (limit != null) {
            modelQuery = modelQuery.limit(limit);
          }
          modelsFound = modelQuery.sync.exec();
        } catch (_error) {
          e = _error;
          res.send(400, e.stack);
        }
        resources = [];
        _ref1 = modelsFound || [];
        for (_i = 0, _len = _ref1.length; _i < _len; _i++) {
          modelFound = _ref1[_i];
          resources.push(_this._createResourceFromModelInstance(modelFound));
        }
        return res.body = resources;
      };
    })(this));
  };

  RestfulResource.prototype.send = fibrous(function(req, res) {
    if (res.body == null) {
      res.body = {};
    }
    return res.send(res.body);
  });

  RestfulResource.prototype._createResourceFromModelInstance = function(modelInstance) {
    var modelField, resourceField, resourceInstance, value, _ref;
    resourceInstance = {};
    _ref = this.schema;
    for (resourceField in _ref) {
      modelField = _ref[resourceField];
      value = dot.get(modelInstance, modelField);
      dot.set(resourceInstance, resourceField, value);
    }
    return resourceInstance;
  };

  RestfulResource.prototype._exctractLimitFromQuery = function(query) {
    var limit, _ref;
    limit = (_ref = query.limit) != null ? _ref : 100;
    delete query.limit;
    return limit;
  };

  RestfulResource.prototype._extractSelectFromQuery = function(query) {
    var modelFields, resourceFields, select, _ref;
    _ref = this._getResourceAndModelFieldsFromSchema(), resourceFields = _ref[0], modelFields = _ref[1];
    select = query.select;
    if (select) {
      select = _(select.split(' ')).intersection(resourceFields).join(' ');
    } else {
      select = resourceFields.join(' ');
    }
    delete query.select;
    return select;
  };

  RestfulResource.prototype._selectValidSearchFieldsFromQuery = function(query) {
    var field, modelFields, resourceFields, validFields, value, _ref;
    _ref = this._getResourceAndModelFieldsFromSchema(), resourceFields = _ref[0], modelFields = _ref[1];
    validFields = {};
    for (field in query) {
      value = query[field];
      if (resourceFields[field]) {
        validFields[field] = value;
      }
    }
    return validFields;
  };

  RestfulResource.prototype._getResourceAndModelFieldsFromSchema = function() {
    var modelFields, resourceFields;
    resourceFields = Object.keys(this.schema);
    modelFields = resourceFields.map((function(_this) {
      return function(resourceField) {
        return _this.schema[resourceField];
      };
    })(this));
    return [resourceFields, modelFields];
  };

  RestfulResource.prototype._isObjectId = function(string) {
    return /^[0-9a-fA-F]{24}$/.test(string);
  };

  return RestfulResource;

})();
