// Generated by CoffeeScript 1.8.0
var RestfulResource, dot, fibrous, mongoose, _,
  __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
  __indexOf = [].indexOf || function(item) { for (var i = 0, l = this.length; i < l; i++) { if (i in this && this[i] === item) return i; } return -1; };

dot = require('dot-component');

mongoose = require('mongoose');

_ = require('underscore');

fibrous = require('fibrous');

module.exports = RestfulResource = (function() {
  function RestfulResource(Model, schema) {
    this.Model = Model;
    this.schema = schema;
    this._isObjectId = __bind(this._isObjectId, this);
    this._getResourceAndModelFieldsFromSchema = __bind(this._getResourceAndModelFieldsFromSchema, this);
    this._convertKeysToDotStrings = __bind(this._convertKeysToDotStrings, this);
    this._selectValidResourceSearchFieldsFromQuery = __bind(this._selectValidResourceSearchFieldsFromQuery, this);
    this._extractModelSelectFieldsFromQuery = __bind(this._extractModelSelectFieldsFromQuery, this);
    this._extractLimitFromQuery = __bind(this._extractLimitFromQuery, this);
    this._createResourceFromModelInstance = __bind(this._createResourceFromModelInstance, this);
    this.send = __bind(this.send, this);
    this.get = __bind(this.get, this);
  }

  RestfulResource.prototype.get = function(paramId) {
    return fibrous((function(_this) {
      return function(req, res, next) {
        var e, id, modelFound, modelQuery, select;
        id = req.params[paramId];
        select = _this._extractModelSelectFieldsFromQuery(req.query);
        try {
          modelQuery = _this.Model.findById(id);
          if (select != null) {
            modelQuery = modelQuery.select(select);
          }
          modelFound = modelQuery.sync.exec();
        } catch (_error) {
          e = _error;
          res.send(400, e.stack);
        }
        if (modelFound == null) {
          res.send(404, "No " + paramId + " found with id " + id);
        }
        return res.send(_this._createResourceFromModelInstance(modelFound));
      };
    })(this));
  };

  RestfulResource.prototype.query = function() {
    return fibrous((function(_this) {
      return function(req, res, next) {
        var dotSearchFields, e, limit, modelField, modelQuery, modelsFound, resourceField, resources, searchFields, select, value;
        limit = _this._extractLimitFromQuery(req.query);
        select = _this._extractModelSelectFieldsFromQuery(req.query);
        searchFields = _this._selectValidResourceSearchFieldsFromQuery(req.query);
        dotSearchFields = _this._convertKeysToDotStrings(searchFields);
        try {
          modelQuery = _this.Model.find();
          for (resourceField in dotSearchFields) {
            value = dotSearchFields[resourceField];
            modelField = _this.schema[resourceField];
            modelQuery = modelQuery.where(modelField).equals(value);
          }
          if (select != null) {
            modelQuery = modelQuery.select(select);
          }
          if (limit != null) {
            modelQuery = modelQuery.limit(limit);
          }
          modelsFound = modelQuery.sync.exec();
        } catch (_error) {
          e = _error;
          res.send(400, e.stack);
        }
        resources = modelsFound.map(function(modelFound) {
          return _this._createResourceFromModelInstance(modelFound);
        });
        return res.send(resources);
      };
    })(this));
  };

  RestfulResource.prototype.send = function(req, res) {
    if (res.body == null) {
      res.body = {};
    }
    return res.send(res.body);
  };

  RestfulResource.prototype._createResourceFromModelInstance = function(modelInstance) {
    var modelField, resourceField, resourceInstance, value, _ref;
    resourceInstance = {};
    _ref = this.schema;
    for (resourceField in _ref) {
      modelField = _ref[resourceField];
      value = dot.get(modelInstance, modelField);
      if (value) {
        dot.set(resourceInstance, resourceField, value);
      }
    }
    return resourceInstance;
  };

  RestfulResource.prototype._extractLimitFromQuery = function(query) {
    var limit, _ref;
    limit = (_ref = query.$limit) != null ? _ref : 100;
    delete query.$limit;
    return limit;
  };

  RestfulResource.prototype._extractModelSelectFieldsFromQuery = function(query) {
    var modelFields, modelSelectFields, resourceFields, resourceSelectFields, select, _ref;
    _ref = this._getResourceAndModelFieldsFromSchema(), resourceFields = _ref[0], modelFields = _ref[1];
    select = query.$select;
    if (select) {
      if (typeof select === 'string') {
        select = select.split(' ');
      }
      resourceSelectFields = _(select).intersection(resourceFields);
      modelSelectFields = resourceSelectFields.map((function(_this) {
        return function(resourceSelectField) {
          return _this.schema[resourceSelectField];
        };
      })(this));
      modelSelectFields = modelSelectFields.join(' ');
    } else {
      modelSelectFields = modelFields.join(' ');
    }
    delete query.$select;
    return modelSelectFields;
  };

  RestfulResource.prototype._selectValidResourceSearchFieldsFromQuery = function(query) {
    var field, modelFields, queryDotString, resourceFields, validFields, value, _ref;
    queryDotString = this._convertKeysToDotStrings(query);
    _ref = this._getResourceAndModelFieldsFromSchema(), resourceFields = _ref[0], modelFields = _ref[1];
    validFields = {};
    for (field in queryDotString) {
      value = queryDotString[field];
      if (__indexOf.call(resourceFields, field) >= 0) {
        dot.set(validFields, field, value);
      }
    }
    return validFields;
  };

  RestfulResource.prototype._convertKeysToDotStrings = function(obj) {
    var dotKeys, dotStringify;
    dotKeys = {};
    dotStringify = function(obj, current) {
      var key, newKey, value, _results;
      _results = [];
      for (key in obj) {
        value = obj[key];
        newKey = current ? current + "." + key : key;
        if (value && typeof value === "object") {
          _results.push(dotStringify(value, newKey));
        } else {
          _results.push(dotKeys[newKey] = value);
        }
      }
      return _results;
    };
    dotStringify(obj);
    return dotKeys;
  };

  RestfulResource.prototype._getResourceAndModelFieldsFromSchema = function() {
    var modelFields, resourceFields;
    resourceFields = Object.keys(this.schema);
    modelFields = resourceFields.map((function(_this) {
      return function(resourceField) {
        return _this.schema[resourceField];
      };
    })(this));
    return [resourceFields, modelFields];
  };

  RestfulResource.prototype._isObjectId = function(string) {
    return /^[0-9a-fA-F]{24}$/.test(string);
  };

  return RestfulResource;

})();
